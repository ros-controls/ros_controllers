#! /usr/bin/env python

##########################################################################
# Software License Agreement (BSD License)
#
#  Copyright (c) 2020, Exobotic
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   * Redistributions in binary form must reproduce the above
#     copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided
#     with the distribution.
#   * Neither the name of Exobotic nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
##########################################################################

import rospy as ros
import numpy as np
import sys
import tf
from nav_msgs.msg import Odometry

class Link2TF():

    def __init__(self):

        ros.init_node("tf_world_publisher")

        self.rate = ros.Rate(100)
        self.tf_pub = tf.TransformBroadcaster()
        self.tf_orig = "odom"
        self.tf_dest = "world"
        self.world_sub = ros.Subscriber("/swervebot/ground_truth_pose", Odometry, self.update_world)
        self.odom_sub = ros.Subscriber("/swervebot/swerve_controller/odom", Odometry, self.update_odom)

        self.world_pose = np.array([0, 0, 0])
        self.odom_pose = np.array([0, 0, 0])
        self.world_ori = [0, 0, 0, 0]
        self.odom_ori = [0, 0, 0, 0]

    def run(self):

        while not ros.is_shutdown():

            self.tf_pub.sendTransform(self.world_pose - self.odom_pose, 
                                      tf.transformations.quaternion_multiply(self.world_ori, self.odom_ori),
                                      ros.Time.now(), self.tf_orig, self.tf_dest)

            self.rate.sleep()

    def update_world(self, msg):

        self.world_pose = np.array([msg.pose.pose.position.x,
                                    msg.pose.pose.position.y,
                                    msg.pose.pose.position.z])

        self.world_ori = [msg.pose.pose.orientation.x,
                          msg.pose.pose.orientation.y,
                          msg.pose.pose.orientation.z,
                          msg.pose.pose.orientation.w]

    def update_odom(self, msg):

        self.odom_pose = np.array([msg.pose.pose.position.x,
                                   msg.pose.pose.position.y,
                                   msg.pose.pose.position.z])

        self.odom_ori = [msg.pose.pose.orientation.x,
                         msg.pose.pose.orientation.y,
                         msg.pose.pose.orientation.z,
                         -msg.pose.pose.orientation.w]

if __name__ == '__main__':

    l2t = Link2TF()
    l2t.run()